using System;
using System.Collections;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Task4
{
    public class Итерпритатор
    {
        List<ЗаписьДляПолиз> _полиз;
        int индекс = 0;
        СтэкВыполнения _стэк = new СтэкВыполнения();
        Dictionary<string, int> _переменные = new Dictionary<string, int>();
        public Итерпритатор(List<ЗаписьДляПолиз> полиз)
        {
            _полиз = полиз;
        }
        private int GetVarValue(string название)
        {
            if (!_переменные.ContainsKey(название))
            {
                _переменные[название] = 0;
            }
            return _переменные[название];
        }
        public void Интерпитация()
        {
            Console.WriteLine("| {0, -3} |{1, -20} | {2, -25} |", "", "Стэк", "Переменные");
            int позиция = 0;
            while (позиция < _полиз.Count-1)
            {
                var запись = _полиз[позиция];
                switch (запись.Тип)
                {
                    case ТипЗаписи.Комманда:
                        var названиеКомманды = запись.Значение;
                        позиция = ExecuteCommand(названиеКомманды, позиция);
                        break;
                    case ТипЗаписи.Переменная:
                        _стэк.ПоложитьЗначение(GetVarValue(запись.Значение), запись.Значение);
                        ШагПроцесса(++индекс);
                        позиция++;
                        break;
                    case ТипЗаписи.Константа:
                        _стэк.ПоложитьЗначение(Convert.ToInt32(запись.Значение), "");
                        ШагПроцесса(++индекс);
                        позиция++;
                        break;
                    case ТипЗаписи.УказательНаКоманду:
                        _стэк.ПоложитьЗначение(Convert.ToInt32(запись.Значение), "");
                        ШагПроцесса(++индекс);
                        позиция++;
                        break;
                    case ТипЗаписи.ПоследняяЗапись:
                        break;
                    default:
                        throw new Exception($"Неизвестный тип записи: {запись.Тип}");
                }
            }
        }
        private void SetVarValue(string название, int значение)
        {
            _переменные[название] = значение;
        }
        public int ExecuteCommand(string названиеКомманды, int позиция)
        {
            try
            {
                if (названиеКомманды == ТипКомманды.SET.ToString())
                {
                    var значение = _стэк.ДостатьЗначение();
                    var переменная = _стэк.ДостатьЗначение();
                    SetVarValue(переменная.Item2, значение.Item1);
                    return позиция + 1;
                }
                else if (названиеКомманды == ТипКомманды.ADD.ToString())
                {
                    var переменная1 = _стэк.ДостатьЗначение();
                    var переменная2 = _стэк.ДостатьЗначение();
                    _стэк.ПоложитьЗначение(переменная1.Item1 + переменная2.Item1, "");
                    return позиция + 1;
                }
                else if (названиеКомманды == ТипКомманды.SUB.ToString())
                {
                    var переменная1 = _стэк.ДостатьЗначение();
                    var переменная2 = _стэк.ДостатьЗначение();
                    _стэк.ПоложитьЗначение(переменная2.Item1 - переменная1.Item1, "");
                    return позиция + 1;
                }
                else if (названиеКомманды == ТипКомманды.MUL.ToString())
                {
                    var переменная1 = _стэк.ДостатьЗначение();
                    var переменная2 = _стэк.ДостатьЗначение();
                    _стэк.ПоложитьЗначение(переменная1.Item1 * переменная2.Item1, "");
                    return позиция + 1;
                }
                else if (названиеКомманды == ТипКомманды.DIV.ToString())
                {
                    var переменная1 = _стэк.ДостатьЗначение();
                    if (переменная1.Item1 == 0)
                        throw new DivideByZeroException("Ошибка: деление на ноль.");
                    var переменная2 = _стэк.ДостатьЗначение();
                    _стэк.ПоложитьЗначение(переменная2.Item1 / переменная1.Item1, "");
                    return позиция + 1;
                }
                else if (названиеКомманды == ТипКомманды.CMPL.ToString())
                {
                    var первоеЗначение = _стэк.ДостатьЗначение();
                    var второеЗначение = _стэк.ДостатьЗначение();
                    _стэк.ПоложитьЗначение(первоеЗначение.Item1 > второеЗначение.Item1 ? 1 : 0, "");
                    return позиция + 1;
                }
                else if (названиеКомманды == ТипКомманды.CMPLE.ToString())
                {
                    var первоеЗначение = _стэк.ДостатьЗначение();
                    var второеЗначение = _стэк.ДостатьЗначение();
                    _стэк.ПоложитьЗначение(первоеЗначение.Item1 >= второеЗначение.Item1 ? 1 : 0, "");
                    return позиция + 1;
                }
                else if (названиеКомманды == ТипКомманды.CMPG.ToString())
                {
                    var первоеЗначение = _стэк.ДостатьЗначение();
                    var второеЗначение = _стэк.ДостатьЗначение();
                    _стэк.ПоложитьЗначение(первоеЗначение.Item1 < второеЗначение.Item1 ? 1 : 0, "");
                    return позиция + 1;
                }
                else if (названиеКомманды == ТипКомманды.CMPGE.ToString())
                {
                    var первоеЗначение = _стэк.ДостатьЗначение();
                    var второеЗначение = _стэк.ДостатьЗначение();
                    _стэк.ПоложитьЗначение(первоеЗначение.Item1 <= второеЗначение.Item1 ? 1 : 0, "");
                    return позиция + 1;
                }
                else if (названиеКомманды == ТипКомманды.CMPE.ToString())
                {
                    var первоеЗначение = _стэк.ДостатьЗначение();
                    var второеЗначение = _стэк.ДостатьЗначение();
                    _стэк.ПоложитьЗначение(первоеЗначение.Item1 == второеЗначение.Item1 ? 1 : 0, "");
                    return позиция + 1;
                }
                else if (названиеКомманды == ТипКомманды.And.ToString())
                {
                    var первоеЗначение = _стэк.ДостатьЗначение();
                    var второеЗначение = _стэк.ДостатьЗначение();
                    _стэк.ПоложитьЗначение(первоеЗначение.Item1 != 0 && второеЗначение.Item1 != 0 ? 1 : 0, "");
                    return позиция + 1;
                }
                else if (названиеКомманды == ТипКомманды.Or.ToString())
                {
                    var первоеСравнение = _стэк.ДостатьЗначение();
                    var второеСравнение = _стэк.ДостатьЗначение();
                    _стэк.ПоложитьЗначение((первоеСравнение.Item1 != 0 || второеСравнение.Item1 != 0) ? 1 : 0, "");
                    return позиция + 1;
                }
                else if (названиеКомманды == ТипКомманды.JMP.ToString())
                {
                    return _стэк.ДостатьЗначение().Item1;
                }
                else if (названиеКомманды == ТипКомманды.JZ.ToString())
                {
                    int address = _стэк.ДостатьЗначение().Item1;
                    int condition = _стэк.ДостатьЗначение().Item1;
                    return condition == 0 ? address : позиция + 1;
                }
                else
                    throw new Exception($"Неизвестная команда: {названиеКомманды}");
            }
            finally
            {
                ШагПроцесса(++индекс);
            }
        }
        public void ШагПроцесса(int индекс)
        {
            Console.WriteLine("| {0, -3} |{1, -20} | {2, -25} |", индекс, _стэк.СостояниеСтэка(), Переменные());
        }
        public string Переменные()
        {
            var s = "";
            foreach (var элемент in _переменные)
            {
                int значение = элемент.Value;
                s += $"{элемент.Key} = {значение} ";
            }
            return s;
        }
        public void ВыводПеременных()
        {
            Console.WriteLine("Значения переменных:");
            Console.WriteLine(Переменные());
        }
    }
}
