using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Task3
{
    public class ЛексическийАнализатор
    {
        private readonly string _входнаяСтрока;
        private int _позиция;

        public ЛексическийАнализатор(string входнаяСтрока)
        {
            _входнаяСтрока = входнаяСтрока.ToLower();
            _позиция = 0;
        }

        public List<Токен> Обозначение()
        {
            var Токены = new List<Токен>();

            while (_позиция < _входнаяСтрока.Length)
            {
                var текущийСимвол = _входнаяСтрока[_позиция];

                if (char.IsWhiteSpace(текущийСимвол))
                {
                    _позиция++;
                    continue;
                }

                if (char.IsLetter(текущийСимвол))
                {
                    var идентификатор = СчитатьИдентификатор();
                    if (идентификатор == "do")
                    {
                        Токены.Add(new Токен(ТипЛексемы.Do, идентификатор));
                    }
                    else if (идентификатор == "while")
                    {
                        Токены.Add(new Токен(ТипЛексемы.While, идентификатор));
                    }
                    else if (идентификатор == "and")
                    {
                        Токены.Add(new Токен(ТипЛексемы.And, идентификатор));
                    }
                    else if (идентификатор == "or")
                    {
                        Токены.Add(new Токен(ТипЛексемы.Or, идентификатор));
                    }
                    else if (идентификатор == "loop")
                    {
                        Токены.Add(new Токен(ТипЛексемы.Loop, идентификатор));
                    }
                    else
                    {
                        Токены.Add(new Токен(ТипЛексемы.ID, идентификатор));
                    }
                    continue;
                }

                if (char.IsDigit(текущийСимвол))
                {
                    var number = СчитатьЧисло();
                    Токены.Add(new Токен(ТипЛексемы.Константа, number));
                    continue;
                }

                switch (текущийСимвол)
                {
                    case '=':
                        if (_позиция + 1 < _входнаяСтрока.Length && _входнаяСтрока[_позиция + 1] == '=')
                        {
                            Токены.Add(new Токен(ТипЛексемы.Сравнение, "=="));
                            _позиция += 2;
                        }
                        else
                        {
                            Токены.Add(new Токен(ТипЛексемы.Присваивание, "="));
                            _позиция++;
                        }
                        break;
                    case '!':
                        if (_позиция + 1 < _входнаяСтрока.Length && _входнаяСтрока[_позиция + 1] == '=')
                        {
                            Токены.Add(new Токен(ТипЛексемы.Сравнение, "!="));
                            _позиция += 2;
                        }
                        break;
                    case '<':
                        if (_позиция + 1 < _входнаяСтрока.Length && _входнаяСтрока[_позиция + 1] == '=')
                        {
                            Токены.Add(new Токен(ТипЛексемы.Сравнение, "<="));
                            _позиция += 2;
                        }
                        else
                        {
                            Токены.Add(new Токен(ТипЛексемы.Сравнение, "<"));
                            _позиция++;
                        }
                        break;
                    case '>':
                        if (_позиция + 1 < _входнаяСтрока.Length && _входнаяСтрока[_позиция + 1] == '=')
                        {
                            Токены.Add(new Токен(ТипЛексемы.Сравнение, ">="));
                            _позиция += 2;
                        }
                        else
                        {
                            Токены.Add(new Токен(ТипЛексемы.Сравнение, ">"));
                            _позиция++;
                        }
                        break;
                    case '+':
                        Токены.Add(new Токен(ТипЛексемы.Плюс, "+"));
                        _позиция++;
                        break;
                    case '-':
                        Токены.Add(new Токен(ТипЛексемы.Плюс, "-"));
                        _позиция++;
                        break;
                    case '*':
                        Токены.Add(new Токен(ТипЛексемы.Умножить, "*"));
                        _позиция++;
                        break;
                    case '(':
                        Токены.Add(new Токен(ТипЛексемы.ОткрывающаяСкобка, "("));
                        _позиция++;
                        break;
                    case ')':
                        Токены.Add(new Токен(ТипЛексемы.ЗакрывающаяСкобка, ")"));
                        _позиция++;
                        break;
                    case '{':
                        Токены.Add(new Токен(ТипЛексемы.ОткрывающаяФигурнаяСкобка, "{"));
                        _позиция++;
                        break;
                    case '}':
                        Токены.Add(new Токен(ТипЛексемы.ЗакрывающаяФигурнаяСкобка, "}"));
                        _позиция++;
                        break;
                    case ';':
                        Токены.Add(new Токен(ТипЛексемы.Разделитель, ";"));
                        _позиция++;
                        break;
                    case '/':
                        Токены.Add(new Токен(ТипЛексемы.Деление, "/"));
                        _позиция++;
                        break;
                    default:
                        throw new Exception($"Неизвестный символ: {текущийСимвол}");
                }
            }

            return Токены;
        }

        private string СчитатьИдентификатор()
        {
            var начальнаяПозиция = _позиция;
            while (_позиция < _входнаяСтрока.Length && char.IsLetterOrDigit(_входнаяСтрока[_позиция]))
            {
                _позиция++;
            }

            return _входнаяСтрока.Substring(начальнаяПозиция, _позиция - начальнаяПозиция);
        }

        private string СчитатьЧисло()
        {
            var начальнаяПозиция = _позиция;
            while (_позиция < _входнаяСтрока.Length && char.IsDigit(_входнаяСтрока[_позиция]))
            {
                _позиция++;
            }

            return _входнаяСтрока.Substring(начальнаяПозиция, _позиция - начальнаяПозиция);
        }
    }
}
